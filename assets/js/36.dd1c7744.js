(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{518:function(a,s,t){"use strict";t.r(s);var v=t(13),e=Object(v.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"java-的类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-的类加载器"}},[a._v("#")]),a._v(" java 的类加载器")]),a._v(" "),t("h3",{attrs:{id:"_1、java-的类加载器的种类有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、java-的类加载器的种类有哪些"}},[a._v("#")]),a._v(" 1、java 的类加载器的种类有哪些？")]),a._v(" "),t("p",[a._v("1）根类加载器（BootStrap）")]),a._v(" "),t("p",[a._v("2）扩展类加载器（Extension） ---加载位置：jre\\lib\\ext 中")]),a._v(" "),t("p",[a._v("3）系统（应用）类加载器（System\\App） ---加载位置：classpath 中")]),a._v(" "),t("p",[a._v("4）自定义加载器（必须继承 ClassLoader）")]),a._v(" "),t("h3",{attrs:{id:"_2、类什么时候被初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、类什么时候被初始化"}},[a._v("#")]),a._v(" 2、类什么时候被初始化？")]),a._v(" "),t("p",[a._v("1）创建类的实例，也就是 new 一个对象")]),a._v(" "),t("p",[a._v("2）访问某个类或接口的静态变量，或者对该静态变量赋值")]),a._v(" "),t("p",[a._v("3）调用类的静态方法")]),a._v(" "),t("p",[a._v('4）反射（Class.forName("com.lyj.load")）')]),a._v(" "),t("p",[a._v("5）初始化一个类的子类（会首先初始化子类的父类）")]),a._v(" "),t("p",[a._v("6）JVM 启动时标明的启动类，即文件名和类名相同的那个类")]),a._v(" "),t("p",[a._v("只有 这 6 中情况才会导致类的类的初始化")]),a._v(" "),t("h4",{attrs:{id:"初始化步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化步骤"}},[a._v("#")]),a._v(" 初始化步骤")]),a._v(" "),t("p",[a._v("1）如果这个类还没有被加载和链接，那先进行加载和链接")]),a._v(" "),t("p",[a._v("2）假如这个类存在直接父类，并且这个类还没有被初始化（注意：在一个类加载器中，类只能初始化一 次），那就初始化直接的父类（不适用于接口）")]),a._v(" "),t("p",[a._v("3）加入类中存在初始化语句（如 static 变量和 static 块），那就依次执行这些初始化语句。")]),a._v(" "),t("h3",{attrs:{id:"_3、java-类加载体系致-classloader-双亲委托机制-待写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、java-类加载体系致-classloader-双亲委托机制-待写"}},[a._v("#")]),a._v(" 3、Java 类加载体系致 ClassLoader 双亲委托机制（待写）")]),a._v(" "),t("h3",{attrs:{id:"_4、描述一下-jvm-加载-class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、描述一下-jvm-加载-class"}},[a._v("#")]),a._v(" 4、描述一下 JVM 加载 class")]),a._v(" "),t("p",[a._v("JVM 中类的装载是由类加载器（ClassLoader）和它的子类来实现的，Java 中的类加载器是一个重要的 Java 运 行时系统组件，它负责在运行时查找和装入类文件中的类。")]),a._v(" "),t("p",[a._v("由于 Java 的跨平台性，经过编译的 Java 源程序并不是一个可执行程序，而是一个或多个类文件。")]),a._v(" "),t("p",[a._v("当 Java 程序 需要使用某个类时,JVM 会确保这个类已经被加载、连接（验证、准备和解析）和初始化。")]),a._v(" "),t("p",[a._v("类的加载是指把类的.class 文件中的数据读入到内存中，通常是创建一个字节数组读入.class 文件，然后产生与所加载类对应的 Class 对象。")]),a._v(" "),t("p",[a._v("加载完成后，Class 对象还不完整，所以此时的类还不可用。")]),a._v(" "),t("p",[a._v("当类被加载后就进入连接阶段，这一阶段包括验证、准备 （为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。")]),a._v(" "),t("p",[a._v("最后 JVM 对类进行初始化，包括：如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类； 如果类中存在初始化语句，就依次执行这些初始化语句。")]),a._v(" "),t("p",[a._v("类的加载是由类加载器完成的，类加载器包括：根加载器 （BootStrap）、扩展加载器（Extension）、系统加载器（System）和用户自定义类加载器（java.lang.ClassLoader 的子类）。")]),a._v(" "),t("p",[a._v("从 Java 2（JDK 1.2）开始，类加载过程采取了父亲委托机制（PDM）。")]),a._v(" "),t("p",[a._v("PDM 更好的保证了 Java 平台的安全性，在该机制中，JVM 自带的 Bootstrap 是根加载器，其他的加载器都有且仅有一个父类加载器。")]),a._v(" "),t("p",[a._v("类的加载首先请求 父类加载器加载，父类加载器无能为力时才由其子类加载器自行加载。")]),a._v(" "),t("p",[a._v("JVM 不会向 Java 程序提供对 Bootstrap 的引用。")]),a._v(" "),t("p",[t("strong",[a._v("下面是关于几个类加载器的说明：")])]),a._v(" "),t("p",[a._v("• Bootstrap：一般用本地代码实现，负责加载 JVM 基础核心类库（rt.jar）；")]),a._v(" "),t("p",[a._v("• Extension：从 java.ext.dirs 系统属性所指定的目录中加载类库，它的父加载器是 Bootstrap；")]),a._v(" "),t("p",[a._v("• System：又叫应用类加载器，其父类是 Extension。它是应用最广泛的类加载器。它从环境变量 classpath 或者系统属性 java.class.path 所指定的目录中记载类，是用户自定义加载器的默认父加载器。")]),a._v(" "),t("h3",{attrs:{id:"_5、获取一个类对象有哪些方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、获取一个类对象有哪些方式"}},[a._v("#")]),a._v(" 5、获取一个类对象有哪些方式")]),a._v(" "),t("p",[a._v("类型.class")]),a._v(" "),t("p",[a._v("例如：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("对象.getClass()")]),a._v(" "),t("p",[a._v("例如：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("Class.forName()")]),a._v(" "),t("p",[a._v("例如：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("forName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"java.lang.String"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);